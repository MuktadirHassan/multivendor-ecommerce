openapi: 3.0.3
info:
  title: E-commerce Orders API
  version: 1.0.0
  description: Order management endpoints for multi-vendor e-commerce platform

components:
  schemas:
    OrderItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: integer
        quantity:
          type: integer
          minimum: 1

    CreateOrderRequest:
      type: object
      required:
        - addressId
        - items
        - paymentMethod
      properties:
        addressId:
          type: integer
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        paymentMethod:
          type: string
          enum: [CREDIT_CARD, DEBIT_CARD, BANK_TRANSFER, WALLET]

    Order:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        total:
          type: number
          format: float
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]
        paymentStatus:
          type: string
          enum: [PENDING, COMPLETED, FAILED, REFUNDED]
        paymentMethod:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              productId:
                type: integer
              quantity:
                type: integer
              price:
                type: number
              product:
                type: object
                properties:
                  name:
                    type: string
                  shop:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
            postalCode:
              type: string
        tracking:
          type: object
          properties:
            carrier:
              type: string
            trackingNo:
              type: string
            status:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED]

    UpdatePaymentStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED, REFUNDED]

paths:
  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid input or insufficient stock
        "401":
          description: Unauthorized
        "404":
          description: Product or address not found

  /orders/my-orders:
    get:
      tags:
        - Orders
      summary: Get authenticated user's orders
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of user orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "404":
          description: Order not found

  /orders/shop/{shopId}:
    get:
      tags:
        - Orders
      summary: Get shop orders
      security:
        - BearerAuth: []
      parameters:
        - name: shopId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of shop orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not a seller or admin

  /orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusRequest"
      responses:
        "200":
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid status
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not a seller or admin
        "404":
          description: Order not found

  /orders/{id}/payment-status:
    put:
      tags:
        - Orders
      summary: Update payment status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentStatusRequest"
      responses:
        "200":
          description: Payment status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid status
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not an admin
        "404":
          description: Order not found

  /orders/date-range:
    get:
      tags:
        - Orders
      summary: Get orders by date range
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: List of orders within date range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: Invalid date range
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Not an admin
